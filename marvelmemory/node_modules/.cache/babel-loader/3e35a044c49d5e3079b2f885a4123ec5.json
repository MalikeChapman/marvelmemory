{"ast":null,"code":"var _jsxFileName = \"/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/Game.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useEffect } from \"react\";\nimport Header from \"./Header\";\nimport MarvelCharacters from \"./MarvelCharacters\";\nimport Victory from \"./Victory\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Game() {\n  _s();\n\n  const [win, setWin] = useState(false);\n  const [score, setScore] = useState(0);\n  const [highscore, setHighScore] = useState(0);\n  const [clickedArray, setClickedArray] = useState([]);\n  const [level, setLevel] = useState(1);\n\n  const updateScore = () => {\n    setScore(score => score + 1);\n  };\n\n  const updateHighScore = () => {\n    setHighScore(score + 1);\n  };\n\n  const updateLevel = () => {\n    setLevel(prev => prev + 1);\n  };\n\n  const updateClick = (event, flag) => {\n    let array = [...clickedArray, event.target];\n    setClickedArray(array);\n  };\n\n  const handleClick = event => {\n    if (clickedArray.includes(event.target)) {\n      console.log(\"got it\");\n      setClickedArray([]);\n      setScore(0);\n      setLevel(1);\n    } else {\n      let array = [...clickedArray, event.target];\n      setClickedArray(array);\n      updateScore();\n\n      if (score >= highscore) {\n        updateHighScore();\n      }\n\n      console.log(clickedArray);\n    }\n  };\n\n  useEffect(() => {\n    switch (level) {\n      case 1:\n        {\n          if (score === 5) {\n            updateLevel();\n            console.log(\"ok\");\n          }\n\n          break;\n        }\n\n      case 2:\n        {\n          break;\n        }\n\n      case 3:\n        {\n          break;\n        }\n\n      case 4:\n        {\n          break;\n        }\n\n      default:\n    }\n  }, [score]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Main\",\n    children: [win && /*#__PURE__*/_jsxDEV(Victory, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Header, {\n      level: level,\n      score: score,\n      highscore: highscore\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MarvelCharacters, {\n      level: level,\n      score: score,\n      highscore: highscore,\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Game, \"va9BgohvoDDYApT45bKCstpipSQ=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/Game.js"],"names":["react","useState","useEffect","Header","MarvelCharacters","Victory","Game","win","setWin","score","setScore","highscore","setHighScore","clickedArray","setClickedArray","level","setLevel","updateScore","updateHighScore","updateLevel","prev","updateClick","event","flag","array","target","handleClick","includes","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,SAASC,IAAT,GAAe;AAAA;;AACX,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBP,QAAQ,CAAC,KAAD,CAA9B;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACY,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,CAAD,CAAlC;;AAEA,QAAMgB,WAAW,GAAI,MAAM;AAACP,IAAAA,QAAQ,CAACD,KAAK,IAAIA,KAAK,GAAG,CAAlB,CAAR;AAA6B,GAAzD;;AACA,QAAMS,eAAe,GAAI,MAAM;AAACN,IAAAA,YAAY,CAACH,KAAK,GAAG,CAAT,CAAZ;AAAwB,GAAxD;;AACA,QAAMU,WAAW,GAAI,MAAM;AAACH,IAAAA,QAAQ,CAACI,IAAI,IAAIA,IAAI,GAAG,CAAhB,CAAR;AAA2B,GAAvD;;AACA,QAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,IAAR,KACpB;AACI,QAAIC,KAAK,GAAG,CAAC,GAAGX,YAAJ,EAAkBS,KAAK,CAACG,MAAxB,CAAZ;AACAX,IAAAA,eAAe,CAACU,KAAD,CAAf;AACH,GAJD;;AAKA,QAAME,WAAW,GAAIJ,KAAD,IACpB;AACI,QAAGT,YAAY,CAACc,QAAb,CAAsBL,KAAK,CAACG,MAA5B,CAAH,EACA;AACIG,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAf,MAAAA,eAAe,CAAC,EAAD,CAAf;AACAJ,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACAM,MAAAA,QAAQ,CAAC,CAAD,CAAR;AACH,KAND,MAQA;AACI,UAAIQ,KAAK,GAAG,CAAC,GAAGX,YAAJ,EAAkBS,KAAK,CAACG,MAAxB,CAAZ;AACAX,MAAAA,eAAe,CAACU,KAAD,CAAf;AAEAP,MAAAA,WAAW;;AACX,UAAIR,KAAK,IAAIE,SAAb,EACA;AACIO,QAAAA,eAAe;AAClB;;AACDU,MAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ;AAEH;AACJ,GAtBD;;AAuBAX,EAAAA,SAAS,CAAC,MACV;AACI,YAAOa,KAAP;AAEI,WAAK,CAAL;AACI;AACI,cAAGN,KAAK,KAAK,CAAb,EACA;AACIU,YAAAA,WAAW;AACXS,YAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AAEH;;AACD;AACH;;AACL,WAAK,CAAL;AACI;AACI;AACH;;AACL,WAAK,CAAL;AACI;AACI;AACH;;AACL,WAAK,CAAL;AACI;AACI;AACH;;AACL;AAxBJ;AA4BH,GA9BQ,EA8BN,CAACpB,KAAD,CA9BM,CAAT;AAgCA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,eACKF,GAAG,iBAAI,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,YADZ,eAEI,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEQ,KAAf;AAAsB,MAAA,KAAK,EAAEN,KAA7B;AAAoC,MAAA,SAAS,EAAEE;AAA/C;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEI,KAAzB;AAAgC,MAAA,KAAK,EAAEN,KAAvC;AAA8C,MAAA,SAAS,EAAEE,SAAzD;AAAoE,MAAA,WAAW,EAAEe;AAAjF;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA9EQpB,I;;KAAAA,I;AA+ET,eAAeA,IAAf","sourcesContent":["import react, {useState, useEffect} from \"react\";\nimport Header from \"./Header\";\nimport MarvelCharacters from \"./MarvelCharacters\";\nimport Victory from \"./Victory\";\n\nfunction Game(){\n    const [win, setWin] = useState(false);\n    const [score, setScore] = useState(0);\n    const [highscore, setHighScore] = useState(0);\n    const [clickedArray, setClickedArray] = useState([]);\n    const [level, setLevel] = useState(1);\n    \n    const updateScore =  () => {setScore(score => score + 1)};\n    const updateHighScore =  () => {setHighScore(score + 1)};\n    const updateLevel =  () => {setLevel(prev => prev + 1)};\n    const updateClick = (event, flag) => \n    {\n        let array = [...clickedArray, event.target];\n        setClickedArray(array); \n    }\n    const handleClick = (event) =>\n    {\n        if(clickedArray.includes(event.target))\n        {\n            console.log(\"got it\");\n            setClickedArray([]);\n            setScore(0);\n            setLevel(1);\n        }\n        else\n        {\n            let array = [...clickedArray, event.target];\n            setClickedArray(array); \n    \n            updateScore();\n            if (score >= highscore) \n            {\n                updateHighScore();\n            }\n            console.log(clickedArray)\n           \n        }\n    }\n    useEffect(() =>\n    {\n        switch(level)\n        {\n            case 1:\n                {\n                    if(score === 5)\n                    {\n                        updateLevel();\n                        console.log(\"ok\");\n                        \n                    }\n                    break;\n                }\n            case 2:\n                {\n                    break;\n                }\n            case 3:\n                {\n                    break;\n                }\n            case 4:\n                {\n                    break;\n                }\n            default:\n\n        }\n\n    }, [score])\n\n    return(\n        <div className=\"Main\">\n            {win && <Victory/>}\n            <Header level={level} score={score} highscore={highscore}/>\n            <MarvelCharacters level={level} score={score} highscore={highscore} handleClick={handleClick}/>\n\n        </div>\n    )\n}\nexport default Game;"]},"metadata":{},"sourceType":"module"}