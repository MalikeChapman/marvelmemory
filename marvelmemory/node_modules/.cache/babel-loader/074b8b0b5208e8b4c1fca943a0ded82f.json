{"ast":null,"code":"var _jsxFileName = \"/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/MarvelCharacters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MarvelCharacters(props) {\n  _s();\n\n  const {\n    level,\n    score,\n    highscore,\n    handleClick\n  } = props;\n  const [list, setList] = useState([]);\n  const [showcase, setshowcase] = useState([]);\n  const params = new URLSearchParams({\n    ts: 1,\n    apikey: \"9a5cc156918beff79aa02e30c39145f8\",\n    hash: \"bc62daa140fd5f5c7476880509688a20\",\n    limit: 100\n  });\n  let characters = [];\n\n  let marvelList = async () => await fetch(`https://gateway.marvel.com/v1/public/characters?${params}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).then(data => {\n    console.log(data.data.results);\n    setList(data.data.results);\n\n    for (let i = 0; i < 5; i++) {\n      let random = Math.floor(Math.random() * (list.length + 1));\n      const data = list[random];\n      characters = [...characters, /*#__PURE__*/_jsxDEV(Card, {\n        level: level,\n        score: score,\n        handleClick: handleClick,\n        data: data\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)];\n    }\n\n    setshowcase(characters);\n  });\n\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n  };\n\n  useEffect(() => {\n    marvelList();\n  }, []);\n  useEffect(() => {\n    let shuffle = [...showcase];\n    shuffleArray(shuffle);\n    setshowcase(shuffle);\n  }, [score]);\n  const style = {\n    display: \"grid\",\n    width: \"100%\",\n    height: \"70vh\",\n    gridTemplateColumns: `repeat(5, 1fr)`,\n    gridTemplateRows: `auto`\n  };\n  useEffect(() => {\n    for (let i = 0; i < level * 5; i++) {}\n  }, [level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card-Grid\",\n    style: style,\n    children: showcase\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarvelCharacters, \"61YRce7ZMuQCyo3UlbJUpnxl8Z4=\");\n\n_c = MarvelCharacters;\nexport default MarvelCharacters;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarvelCharacters\");","map":{"version":3,"sources":["/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/MarvelCharacters.js"],"names":["React","useState","useEffect","Card","MarvelCharacters","props","level","score","highscore","handleClick","list","setList","showcase","setshowcase","params","URLSearchParams","ts","apikey","hash","limit","characters","marvelList","fetch","method","then","response","json","data","console","log","results","i","random","Math","floor","length","shuffleArray","array","j","temp","shuffle","style","display","width","height","gridTemplateColumns","gridTemplateRows"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Card from \"./Card\";\n\nfunction MarvelCharacters(props)\n{\n   const {level, score, highscore, handleClick} = props;\n   const [list, setList] = useState([]);\n   const [showcase, setshowcase] = useState([]);\n    const params = new URLSearchParams({\n        ts: 1,\n        apikey: \"9a5cc156918beff79aa02e30c39145f8\",\n        hash: \"bc62daa140fd5f5c7476880509688a20\",\n        limit: 100, \n        \n    });\n    let characters = [];\n    let marvelList = async () => await\n    fetch(`https://gateway.marvel.com/v1/public/characters?${params}`, {\n        method: \"GET\",\n        \n    }).then( response => {\n        return response.json();\n    }).then(data => {\n        console.log(data.data.results);\n        setList(data.data.results);\n        for(let i = 0; i < 5; i++)\n        {\n            let random = Math.floor(Math.random() * (list.length + 1));\n            const data = list[random];\n            characters = [...characters, \n            <Card key={i} level={level} score={score} handleClick={handleClick} data={data}/>]\n        }\n        setshowcase(characters);\n            \n    });\n    const shuffleArray = (array) => {\n        for(let i = array.length - 1; i > 0; i--)\n        {\n            const j = Math.floor(Math.random * (i  + 1));\n            const temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n    useEffect(() =>\n    {\n        marvelList();\n    }, []);\n    useEffect(() =>{\n        let shuffle = [...showcase];\n        shuffleArray(shuffle);\n        setshowcase(shuffle);\n    }, [score])\n\n\n    const style = {\n        display: \"grid\",\n        width: \"100%\",\n        height: \"70vh\",\n        gridTemplateColumns: `repeat(5, 1fr)`,\n        gridTemplateRows: `auto`\n        \n    };\n\n    useEffect(() => {\n        for(let i = 0; i < (level * 5); i++)\n        {\n        }\n    }, [level])\n  \n\n    return(\n    <div className=\"Card-Grid\" style={style}>\n        {showcase}\n    </div>)\n}\n\nexport default MarvelCharacters;"]},"metadata":{},"sourceType":"module"}