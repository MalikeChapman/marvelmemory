{"ast":null,"code":"var _jsxFileName = \"/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/MarvelCharacters.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Card from \"./Card\";\nimport { key } from \"../key\";\nimport { v4 as uuid } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction MarvelCharacters(props) {\n  _s();\n\n  const {\n    level,\n    score,\n    highscore,\n    handleClick,\n    gameStart\n  } = props;\n  const [list, setList] = useState([]);\n  const [showcase, setShowcase] = useState([]);\n  const firstRender = useRef(false);\n  const params = new URLSearchParams({\n    ts: key.ts,\n    apikey: key.apikey,\n    hash: key.hash,\n    limit: key.limit\n  });\n  let characters = [];\n\n  const listFunc = async data => await setList(data);\n\n  let marvelList = async () => await fetch(`https://gateway.marvel.com/v1/public/characters?${params}`, {\n    method: \"GET\"\n  }).then(response => {\n    return response.json();\n  }).then(data => {\n    listFunc(data.data.results);\n    let holder = data.data.results;\n\n    for (let i = 0; i < 5; i++) {\n      let random = Math.floor(Math.random() * (holder.length + 1));\n      const data = holder[random];\n      characters = [...characters, {\n        key: uuid(),\n        data: data\n      }];\n    }\n\n    setShowcase(characters);\n  });\n\n  const shuffleArray = array => {\n    array.sort((a, b) => 0.5 - Math.random());\n  };\n\n  useEffect(() => {\n    marvelList();\n  }, []);\n  useEffect(() => {\n    console.log(\"test\");\n    let shuffle = [...showcase];\n    shuffleArray(shuffle);\n    setShowcase(shuffle);\n  }, [score, highscore]);\n  useEffect(() => {\n    if (firstRender.current) {\n      const updated = newArray();\n      setShowcase(updated);\n    } else {\n      firstRender.current = true;\n    }\n  }, [level]);\n\n  function newArray() {\n    let array = [];\n    let holder = [...list];\n\n    for (let i = 1; i <= level * 5; i++) {\n      const ran = Math.floor(Math.random() * (holder.length + 1));\n      const data = holder[ran];\n      console.log(data);\n\n      if (typeof data === \"undefined\") {\n        console.log(ran + \" data index\");\n        continue;\n      }\n\n      array = [...array, {\n        key: uuid(),\n        data: data\n      }];\n    }\n\n    return array;\n  }\n\n  const style = {\n    display: \"grid\",\n    width: \"100%\",\n    height: \"70vh\",\n    gridTemplateColumns: `repeat(5, 1fr)`,\n    gridTemplateRows: `auto`,\n    justifyContent: \"center\"\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Card-Grid\",\n    style: style,\n    children: showcase.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      level: level,\n      score: score,\n      highscore: highscore,\n      data: card.data,\n      handleClick: handleClick\n    }, card.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 8\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MarvelCharacters, \"BInqoOnDD07dpGTOKK0DFbr8Im8=\");\n\n_c = MarvelCharacters;\nexport default MarvelCharacters;\n\nvar _c;\n\n$RefreshReg$(_c, \"MarvelCharacters\");","map":{"version":3,"sources":["/home/asher/the_odin_project/marvelmemory/marvelmemory/src/components/MarvelCharacters.js"],"names":["React","useState","useEffect","useRef","Card","key","v4","uuid","MarvelCharacters","props","level","score","highscore","handleClick","gameStart","list","setList","showcase","setShowcase","firstRender","params","URLSearchParams","ts","apikey","hash","limit","characters","listFunc","data","marvelList","fetch","method","then","response","json","results","holder","i","random","Math","floor","length","shuffleArray","array","sort","a","b","console","log","shuffle","current","updated","newArray","ran","style","display","width","height","gridTemplateColumns","gridTemplateRows","justifyContent","map","card"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\nimport Card from \"./Card\";\nimport { key } from \"../key\";\nimport {v4 as uuid} from 'uuid';\n\nfunction MarvelCharacters(props)\n{\n   const {level, score, highscore, handleClick, gameStart} = props;\n   const [list, setList] = useState([]);\n   const [showcase, setShowcase] = useState([]);\n   const firstRender = useRef(false);\n    const params = new URLSearchParams({\n        ts: key.ts,\n        apikey: key.apikey,\n        hash: key.hash,\n        limit: key.limit, \n        \n    });\n    let characters = [];\n    const listFunc =  async (data) => await\n        setList(data);\n    \n    let marvelList =  async () => await\n    fetch(`https://gateway.marvel.com/v1/public/characters?${params}`, {\n        method: \"GET\",\n        \n    }).then( response => {\n        return response.json();\n    }).then(data => {\n        listFunc(data.data.results);\n        let holder = data.data.results;\n        for(let i = 0; i < 5; i++)\n        {\n            let random = Math.floor(Math.random() * (holder.length + 1));\n            const data = holder[random];\n            characters = [...characters, {key: uuid(), data: data}]\n        }\n        setShowcase(characters);\n            \n    });\n    const shuffleArray = (array) => {\n        array.sort((a, b) => 0.5 - Math.random());\n    }\n\n    useEffect( () =>\n    {\n        marvelList();\n    }, []);\n\n    useEffect(() =>{\n        console.log(\"test\");\n        let shuffle = [...showcase];\n        shuffleArray(shuffle);\n        setShowcase(shuffle);\n    }, [score, highscore])\n\n    useEffect(() =>\n    {\n        if(firstRender.current)\n        {\n            const updated = newArray();\n            setShowcase(updated);\n    \n        }\n        else\n        {\n            firstRender.current = true;\n        }\n    \n\n    }, [level])\n\n     function newArray ()\n    {\n        let array = [];\n        let holder = [...list];\n        for(let i = 1; i <= (level * 5); i++)\n        {\n            const ran = Math.floor(Math.random() * (holder.length + 1));\n            const data = holder[ran];\n            console.log(data);\n            if(typeof data === \"undefined\")\n            {\n                console.log(ran + \" data index\");\n                continue;\n            }\n            array = [...array, {key: uuid(), data: data}];\n        }\n        return array;\n    }\n\n\n\n\n    const style = {\n        display: \"grid\",\n        width: \"100%\",\n        height: \"70vh\",\n        gridTemplateColumns: `repeat(5, 1fr)`,\n        gridTemplateRows: `auto`,\n        justifyContent: \"center\"\n    };\n  \n    return(\n    <div className=\"Card-Grid\" style={style}>\n      {showcase.map((card) =>\n      (<Card key={card.key} level={level} score={score} highscore={highscore} data={card.data} handleClick={handleClick}/>))}\n    </div>)\n}\n\nexport default MarvelCharacters;"]},"metadata":{},"sourceType":"module"}